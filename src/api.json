{
    "api_calls": [
        {
            "name": "click",
            "description": "This hook is called whenever a player clicks on something with the mouse or uses the \"action\" button on their gamepad. You can find out what key was pressed with the api_get_key_down() or api_get_key_pressed() methods.As this is a single hook for the whole mod you'll probably want to split out the calls within this method to other modules to keep things managable.",
            "params": []
        },
        {
            "name": "clock",
            "description": "This hook is called every 1s of real time by the game. You can use this to handle any general time related logic you need.",
            "params": []
        },
        {
            "name": "data",
            "description": "This hook is called whenever you call the api_get_data() or api_set_data() methods, as file loading is asynchronous.Each mod has it's own dedicated JSON file that you can read and write to through the API to avoid direct file access.",
            "params": [
                {
                    "name": "ev",
                    "type": "string",
                    "documentation": "the type of data event, either SAVE or SAVE depending on which method you used"
                },
                {
                    "name": "data",
                    "type": "string or table",
                    "documentation": "if a SAVE type, will return Success, otherwise if a LOAD type this parameter will contain your JSON file data as a table"
                }
            ]
        },
        {
            "name": "draw",
            "description": "This hook is called every in-game draw cycle. This hook allows you to use the various Draw Methods to draw stuff every cycle.This hook will draw items to the overworld layer - if you want to draw ontop of menus / UI you'll need to use the gui() hook instead.",
            "params": []
        },
        {
            "name": "gui",
            "description": "This hook is called every in-game draw cycle and, like draw() hook, this hook allows you to use the various Draw Methods to draw stuff every cycle.This hook will draw items to the GUI layer on top of everything else. If you want to draw underneath menus you need to use draw() instead.",
            "params": []
        },
        {
            "name": "init",
            "description": "An extremely important and required hook which is called after your mod is registered. This is a chance for you to setup anything you need for your mod straight away, like defining different items and objects or setting up mod globals.If your mod doesn't have an init() hook it will not be loaded.This hook is called before any mod objects might be loaded so you should use ready() if you want to get any mod objects that might have been saved.",
            "params": []
        },
        {
            "name": "key",
            "description": "This hook is called whenever a key is pressed. You can use api_get_key_down or api_get_key_pressed to find out what key/s are being pressed.",
            "params": [
                {
                    "name": "key_code",
                    "type": "integer",
                    "documentation": "the [[Key Codes|keycode]] of the key that was pressed to trigger this event"
                }
            ]
        },
        {
            "name": "pdraw",
            "description": "This hook is called every in-game draw cycle. This hook allows you to use the various Draw Methods to draw stuff every cycle.This hook will draw items to the player layer - this means anything you draw will be on top of the player but at the correct depth (behind trees/walls etc).",
            "params": []
        },
        {
            "name": "ready",
            "description": "This hook is called when all mods have been both registered and initialised. If your mod relies on another mod or just wants to know when everything is ready then it can listen for this event.This event is called after all world objects are loaded in, including mod objects.",
            "params": []
        },
        {
            "name": "register",
            "description": "This is the most important hook as it's called first by the game to register your mod and setup the hooks you want. KISS with this one, don't put any other logic in this method - save that for init() or ready().",
            "params": []
        },
        {
            "name": "save",
            "description": "This hook is called whenever the player manually saves or the game autosaves, to give you a chance to save your mod file if you need to.",
            "params": []
        },
        {
            "name": "tick",
            "description": "This hook is called every 0.1 of real time, enabling you to handle things that need to happy more often and update quickly rather than wait for every second in clock().Please check the logic you are running in this hook along with the FPS meter to ensure you are not starting to reduce performance!",
            "params": []
        },
        {
            "name": "step",
            "description": "This hook is called every frame, which in GameMaker (locked at 60fps) will mean it's called every 1/60s. This hook let's you handle things that need to be updated due to them being something visual - the position of a custom object as you move for example. If you just used tick() you would see a slight lag as it's not being updated at the same FPS.Please check the logic you are running in this hook along with the FPS meter to ensure you are not starting to reduce performance!",
            "params": []
        },
        {
            "name": "worldgen",
            "description": "This hook is called after the initial world generation is complete (land blobs have been placed by the blueprint but objects have not been created yet). This gives you a chance to alter the ground or add structures, or even generate your own objects if you set the blueprint to be blank with api_set_blueprint().For reference, game worlds are 350x350 tiles, with 290x290 being visible on the map and rest being reserved for secret areas.",
            "params": []
        },
        {
            "name": "api_create_bee_stats",
            "description": "A bee is just a fancy item with a bunch of stats assigned, you've probably seen the stats returned in a slot's properties! This method lets you create a bee stat obj by passing a species.The traits will be picked at random from those available in the bee defition, like naturally spawned bees + mutations do.",
            "params": [
                {
                    "name": "species",
                    "type": "integer",
                    "documentation": "the species of the bee to create stats for"
                },
                {
                    "name": "queen",
                    "type": "boolean",
                    "documentation": "whether to make this a queen bee or not"
                }
            ]
        },
        {
            "name": "api_create_counter",
            "description": "This lets you create a custom counter that will iterate through a range of numbers in set increments at the interval specified. This can be used to make stuff like frame counters for animations.",
            "params": [
                {
                    "name": "key",
                    "type": "integer",
                    "documentation": "the unique name to give this counter, this will be unique per mod so you don't have to worry about clashing with other mods"
                },
                {
                    "name": "interval",
                    "type": "integer",
                    "documentation": "the interval in seconds to increment the counter"
                },
                {
                    "name": "start_val",
                    "type": "integer",
                    "documentation": "the value to start the counter at, and reset too when the end_val is reached"
                },
                {
                    "name": "end_val",
                    "type": "integer",
                    "documentation": "the max number for the counter, after which it'll reset to the start_val"
                },
                {
                    "name": "increment",
                    "type": "integer",
                    "documentation": "the amount to increment by each interval"
                }
            ]
        },
        {
            "name": "api_create_effect",
            "description": "This lets you create a special particle effect at a given position. All particle types are just variations of speed and direction, most should be obvious what they are or where they're used in the vanilla game to see them in action.With the exception of BEE_QUEEN, BEE_PFX, NOTE_1, and NOTE_2, all particles are just a single pixel size.",
            "params": [
                {
                    "name": "px",
                    "type": "integer",
                    "documentation": "the x position to create the particle at"
                },
                {
                    "name": "py",
                    "type": "integer",
                    "documentation": "the y position to create the particle at"
                },
                {
                    "name": "ptype",
                    "type": "string",
                    "documentation": "the particle type to create, options are: DUST_RIGHT, DUST_LEFT, DUST_DOWN, TREE_LEAVES, TREE_GROWTH, PAINT_GROWTH, GATE_GROWTH, BEE_PFX, ROCK_GROWTH, STEP_RIGHT, STEP_LEFT, BREATH_RIGHT, BREATH_LEFT, BEE_TRAIL, FLOWER_POLLEN, BEE_QUEEN, BEE_CONFETTI, EXTRACT_DUST, RAIN_DROP, SNOW_DROP, RESIN_DROP, SMOKE_PUFF, STEP_SNOW, CHILL_PUFF, MEAD_BUFF, NOTE_1, or NOTE_2"
                },
                {
                    "name": "amount",
                    "type": "integer",
                    "documentation": "the number of particles to create"
                },
                {
                    "name": "amount",
                    "type": "integer",
                    "documentation": "the color key of particles to create, i.e. FONT_BLUE"
                }
            ]
        },
        {
            "name": "api_create_item",
            "description": "This lets you create an already defined item at a specific position. If you want to define a new item you need to use api_define_item()",
            "params": [
                {
                    "name": "item",
                    "type": "string",
                    "documentation": "the item oid of the item you want to create"
                },
                {
                    "name": "count",
                    "type": "integer",
                    "documentation": "the number of the item to create"
                },
                {
                    "name": "x",
                    "type": "integer",
                    "documentation": "the x position to create the item at"
                },
                {
                    "name": "y",
                    "type": "integer",
                    "documentation": "the y position to create the item at"
                },
                {
                    "name": "stats",
                    "type": "stats",
                    "documentation": "[Optional] a stats obj to use, can be one you got from api_create_bee_stats() or a custom one"
                }
            ]
        },
        {
            "name": "api_create_log",
            "description": "Your new best friend! This logs something to the Modding Console, which you can toggle with .. Each log is shown broken down into the mod name, the group, and then the message.You can also use a shorthand of \"api_log()\".",
            "params": [
                {
                    "name": "ident",
                    "type": "string",
                    "documentation": "an identifier for the log to help you identify message"
                },
                {
                    "name": "msg",
                    "type": "string",
                    "documentation": "the message to log"
                }
            ]
        },
        {
            "name": "api_create_obj",
            "description": "This lets you create an already defined object / menu object at a specific position. If you want to define a new object you need to use api_define_object() or api_define_menu_object().",
            "params": [
                {
                    "name": "oid",
                    "type": "string",
                    "documentation": "the object oid of the object you want to create"
                },
                {
                    "name": "x",
                    "type": "integer",
                    "documentation": "the x position to create the object at"
                },
                {
                    "name": "y",
                    "type": "integer",
                    "documentation": "the y position to create the object at"
                }
            ]
        },
        {
            "name": "api_create_timer",
            "description": "This lets you create a custom timer, which will count down in seconds before returning a callback to a function you've defined in your mod.",
            "params": [
                {
                    "name": "method",
                    "type": "string",
                    "documentation": "the function you want to call when the timer ends"
                },
                {
                    "name": "seconds",
                    "type": "integer",
                    "documentation": "the amount of time you want to wait"
                },
                {
                    "name": "arg1",
                    "type": "Any",
                    "documentation": "[Optional] an argument to pass into the callback"
                },
                {
                    "name": "arg2",
                    "type": "Any",
                    "documentation": "[Optional] an argument to pass into the callback"
                },
                {
                    "name": "arg3",
                    "type": "Any",
                    "documentation": "[Optional] an argument to pass into the callback"
                }
            ]
        },
        {
            "name": "api_define_bee",
            "description": "The one you've all been waiting for! This let's you define your own custom bee species and add it to the game. The species name and bid (both not shown to the player) must be unique across all mods, so play nicely and check in with what other people are doing!",
            "params": [
                {
                    "name": "bee_def",
                    "type": "bee_definition",
                    "documentation": "the bee definition to be used to create the new species"
                },
                {
                    "name": "bee_sprite_image",
                    "type": "string",
                    "documentation": "relative path of the sprite you want to use for the bee item, should be a 72x18 image with 4 frames (normal, normal highlighted, undiscovered, undiscovered highlight)"
                },
                {
                    "name": "bee_shiny_image",
                    "type": "string",
                    "documentation": "relative path of the sprite you want to use for the shiny variant, should be a 380x18 image with 20 frames for a shine animation"
                },
                {
                    "name": "bee_hd_image",
                    "type": "string",
                    "documentation": "relative path of the sprite you want to use for the \"HD\" bee image in the book, should be a 96x48 image with 2 frames (normal, undiscovered)"
                },
                {
                    "name": "bee_color",
                    "type": "color",
                    "documentation": "a color to use for the bee, used in the book, predictor, and the discovery popup"
                },
                {
                    "name": "bee_mag_image",
                    "type": "string",
                    "documentation": "relative path of the sprite you want to use for the bee's news magazine item, should be a 32x16 image with 2 frames (normal, highlighted)"
                },
                {
                    "name": "bee_mag_headline",
                    "type": "string",
                    "documentation": "headline text to use in the news magazine popup"
                },
                {
                    "name": "bee_mag_body",
                    "type": "string",
                    "documentation": "body text to use in the news magazine popup"
                }
            ]
        },
        {
            "name": "api_define_bee_recipe",
            "description": "This allows you to define a custom bee \"recipe\" that lets you specify a hybrid combination along with the criteria for it. Each bee can have up to 3 recipes (as they are shown in the book), and the bees in the recipe need to be defined before calling this method if you are using custom bees.In mutation land, common-forest is the same as forest-common so it doesn't matter which order you set below.",
            "params": [
                {
                    "name": "species_a",
                    "type": "string",
                    "documentation": "one of the two bees this hybrid needs - recipe will be added to both bee definitions"
                },
                {
                    "name": "species_b",
                    "type": "string",
                    "documentation": "the other bee this hybrid needs - recipe will be added to both bee definitions"
                },
                {
                    "name": "species_s",
                    "type": "string",
                    "documentation": "the species that will be formed if a mutation occurs"
                },
                {
                    "name": "mutation_script",
                    "type": "string",
                    "documentation": "a mutation check script that will be called if a hybrid between species a + species b finishes it's lifespan. This let's you decide any extra critera needed for the mutation to occur - must be defined in your mod"
                }
            ]
        },
        {
            "name": "api_define_button",
            "description": "This allows you to define a custom button that can be used with a menu object and clicked to run a function from your mod.",
            "params": [
                {
                    "name": "menu_id",
                    "type": "integer",
                    "documentation": "the menu object instance id you want to define attach the button to"
                },
                {
                    "name": "button_key",
                    "type": "string",
                    "documentation": "the name of the key you want to use which will allow you to access the button instance if you need it later"
                },
                {
                    "name": "button_ox",
                    "type": "integer",
                    "documentation": "the relative x position of the button from the top-left of the menu sprite"
                },
                {
                    "name": "button_oy",
                    "type": "integer",
                    "documentation": "the relative y position of the button from the top-left of the menu sprite"
                },
                {
                    "name": "button_script",
                    "type": "string",
                    "documentation": "the name of the function you want to call when the button is pressed - must be defined in your mod"
                },
                {
                    "name": "sprite_image",
                    "type": "string",
                    "documentation": "relative path of the sprite you want to use for the button, can be any size but needs to have 2 frames (normal, highlighted)"
                },
                {
                    "name": "button_text",
                    "type": "string",
                    "documentation": "[Optional] text to add to the button"
                }
            ]
        },
        {
            "name": "api_define_color",
            "description": "All colors in the game are defined in the colors_ref.json file in the base game, each with their own key.This method allows you to define a custom RGB color to use alongside these existing color keys.",
            "params": [
                {
                    "name": "name",
                    "type": "string",
                    "documentation": "the name to use for your color, will be the color key you can use in future to draw with"
                },
                {
                    "name": "color",
                    "type": "color",
                    "documentation": "the rgb color you want to define"
                }
            ]
        },
        {
            "name": "api_define_command",
            "description": "This method allows you to define a custom command that you can run with the in-game console. This requires dev mode to be enabled with api_set_devmode().Your command name should include the forward slash, i.e. /teleport.",
            "params": [
                {
                    "name": "command_name",
                    "type": "string",
                    "documentation": "the unique name for your command, must be unique across all mods"
                },
                {
                    "name": "command_script",
                    "type": "string",
                    "documentation": "the script to run when the command is entered, will be passed a list of arguments as a parameter"
                }
            ]
        },
        {
            "name": "api_define_flower",
            "description": "This method lets you define a new species of flower and add it to the game. This not only defines a flower object, but also a seedling for the flower as well as a seed item. As such you'll need to provide sprites for the flower as well as the seed packet.As flowers do not have a unique ID per mod you will need to make sure your flower is unique between all mods.",
            "params": [
                {
                    "name": "flower_def",
                    "type": "flower_definition",
                    "documentation": "your flower definition table"
                },
                {
                    "name": "flower_sprite_image",
                    "type": "string",
                    "documentation": "relative path of the sprite you want to use for the flower item, should be a 64x16 image with 4 frames (normal, normal highlighted, undiscovered, undiscovered highlight)"
                },
                {
                    "name": "flower_variants_image",
                    "type": "string",
                    "documentation": "relative path of the sprite you want to use for overworld variants, should be 16 pixels high and the width based on variants. 2 variants would be 4 frames, as each variant needs a normal sprite and a highlight."
                },
                {
                    "name": "flower_seed_image",
                    "type": "string",
                    "documentation": "relative path of the sprite you want to use for the flower seed item, should be a 64x16 image with 4 frames (normal, normal highlighted, undiscovered, undiscovered highlight)"
                },
                {
                    "name": "flower_hd_image",
                    "type": "string",
                    "documentation": "relative path of the sprite you want to use for the \"HD\" bee image in the book, should be a 96x48 image with 2 frames (normal, undiscovered)"
                },
                {
                    "name": "flower_color",
                    "type": "color",
                    "documentation": "custom RGB color for the flower, used in the smoker, overworld and the book"
                }
            ]
        },
        {
            "name": "api_define_flower_recipe",
            "description": "This allows you to define a custom flower \"recipe\" that lets you specify a hybrid combination. Each flower can have up to 3 recipes (as they are shown in the book), and the flowers in the recipe need to be defined before calling this method if you are using custom bees.Flower mutations don't depend on criteria, the chance is based off the chance defined in species_s's definition - you can set this chance on your own flowers when you define them.",
            "params": [
                {
                    "name": "species_a",
                    "type": "string",
                    "documentation": "one of the two flowers this hybrid needs - recipe will be added to both flower definitions"
                },
                {
                    "name": "species_b",
                    "type": "string",
                    "documentation": "the other flower this hybrid needs - recipe will be added to both flower definitions"
                },
                {
                    "name": "species_s",
                    "type": "string",
                    "documentation": "the flower that will be formed if a mutation occurs, it's \"chance\" value will be used for the mutation chance"
                }
            ]
        },
        {
            "name": "api_define_gui",
            "description": "This lets you create a custom GUI for a given menu. GUIs let you have an interactable section of the menu that shows a tooltip when hovered. In the game these are used for things like progress meters, arrows, and tanks.",
            "params": [
                {
                    "name": "menu_id",
                    "type": "integer",
                    "documentation": "the menu object instance id you want to define attach the gui to"
                },
                {
                    "name": "gui_key",
                    "type": "string",
                    "documentation": "the name of the key you want to use which will allow you to access the gui instance if you need it later"
                },
                {
                    "name": "gui_ox",
                    "type": "integer",
                    "documentation": "the relative x position of the gui from the top-left of the menu sprite"
                },
                {
                    "name": "gui_oy",
                    "type": "integer",
                    "documentation": "the relative y position of the gui from the top-left of the menu sprite"
                },
                {
                    "name": "gui_script",
                    "type": "string",
                    "documentation": "the name of the function you want to call when the gui is hovered to return tooltip text - must be defined in your mod"
                },
                {
                    "name": "sprite_image",
                    "type": "string",
                    "documentation": "relative path of the sprite you want to use for the gui, can be any size but needs to have 3 frames (highlighted, stencil, progress block)"
                },
                {
                    "name": "gui_script",
                    "type": "string",
                    "documentation": "[Optional] the name of the function you want to call when the gui is clicked on - must be defined in your mod"
                }
            ]
        },
        {
            "name": "api_define_item",
            "description": "This allows you to define a custom item and add it to the game. Items are things you want the player to be able to pick up, drop, use, or craft with. A good example of an item in the base game are Logs or Planks.When you define an item the item oid will be the id you give prepended with your mod name, i.e. sample_mod_my_item.",
            "params": [
                {
                    "name": "item_def",
                    "type": "item_definition",
                    "documentation": "an item definition table"
                },
                {
                    "name": "sprite_image",
                    "type": "string",
                    "documentation": "relative path to the sprite you want to use for this item, should be a 64x16 image with 4 frames (normal, normal highlighted, undiscovered, undiscovered highlight)"
                }
            ]
        },
        {
            "name": "api_define_menu_object",
            "description": "This let's you define a new menu object. Menu objects are similar to objects but can be clicked to open a menu - a good example in game would be a sawbench or a crate. They can be also given logic to run all the time so are a powerful tool for your mods.When you define an menu object the object oid will be the id you give prepended with your mod name, i.e. sample_mod_my_menu_object.When you define a menu object you also can provide 4 scripts that allow you to run all the fun stuff. These are defined in the scripts you pass in and need to be functions in your mod file. You can also set what values need to be saved from the menu to be loaded when the player reloads the game. See the example futher below for more details.",
            "params": [
                {
                    "name": "menu_def",
                    "type": "menu_definition",
                    "documentation": "the menu definition table to use"
                },
                {
                    "name": "sprite_image",
                    "type": "string",
                    "documentation": "relative path of the sprite you want to use for the menu object, should be a 64x16 image with 4 frames (normal, normal highlighted, undiscovered, undiscovered highlight)"
                },
                {
                    "name": "menu_image",
                    "type": "string",
                    "documentation": "relative path of the sprite you want to use for the menu itself, can be any size but needs to have 4 frames (normal, highlighted, dragging, help overlay)"
                },
                {
                    "name": "scripts",
                    "type": "scripts",
                    "documentation": "a scripts definition for all the scripts you want your menu object to run"
                }
            ]
        },
        {
            "name": "api_define_notification",
            "description": "This let's you define your own notification type to use with api_set_notification(). Standard notification types have their own actions when clicked, some simply dismiss while others open books.Using this method you can set your own action for when the player clicks on your notification!",
            "params": [
                {
                    "name": "notification_type",
                    "type": "string",
                    "documentation": "a name for your notification - will be prepended by your mod ID, i.e. sample_mod_my_notification"
                },
                {
                    "name": "notification_script",
                    "type": "string",
                    "documentation": "the script to run when the player clicks this type of notification - needs to be a method in your mod file"
                }
            ]
        },
        {
            "name": "api_define_npc",
            "description": "This let's you define your NPC, with their own dialogue and their own shop / stock. NPCs are just fancy menu objects that walk and talk!You will need to handle adding in the NPC to the game yourself, whether in worldgen(), ready(), or somewhere else.",
            "params": [
                {
                    "name": "npc_def",
                    "type": "npc_definition",
                    "documentation": "the definition obj for your NPC"
                },
                {
                    "name": "standing_sprite",
                    "type": "string",
                    "documentation": "relative path to the sprite you want to use for the NPC standing animation, should be a 36x18 image with 2 frames (standing, standing_bob)"
                },
                {
                    "name": "standing_h_sprite",
                    "type": "string",
                    "documentation": "relative path to the sprite you want to use for the NPC when standing and highlighted, should be a 36x18 image with 2 frames (standing, standing_bob)"
                },
                {
                    "name": "walking_sprite",
                    "type": "string",
                    "documentation": "relative path to the sprite you want to use for the NPC walk animation, should be a 72x18 image with 4 frames (stand, step_1, stand, step_2)"
                },
                {
                    "name": "walking_h_sprite",
                    "type": "string",
                    "documentation": "relative path to the sprite you want to use for the NPC when walking and highlighted, should be a 72x18 image with 4 frames (stand, step_1, stand, step_2)"
                },
                {
                    "name": "head_sprite",
                    "type": "string",
                    "documentation": "relative path to the sprite you want to use for this NPCs map icon, should be a 64x16 image with 4 frames (normal, normal highlighted, undiscovered, undiscovered highlight)"
                },
                {
                    "name": "bust_sprite",
                    "type": "string",
                    "documentation": "relative path to the sprite you want to use for this item, should be a 18x14 image with 1 frames"
                },
                {
                    "name": "item_sprite",
                    "type": "string",
                    "documentation": "relative path to the sprite you want to use for this NPCs item (that you get when you hammer an NPC), should be a 64x16 image with 2 frames (normal, normal highlighted)"
                },
                {
                    "name": "dialogue_menu_sprite",
                    "type": "string",
                    "documentation": "relative path to the sprite you want to use for this NPCs dialogue menu, should be a 648x138 image with 2 frames (normal, normal highlighted) but can technically be any size if you want to mess with it"
                },
                {
                    "name": "shop_menu_image",
                    "type": "string",
                    "documentation": "relative path of the sprite you want to use for the NPCs shop menu, can be any size but needs to have 4 frames (normal, highlighted, dragging, help overlay)"
                }
            ]
        },
        {
            "name": "api_define_object",
            "description": "This let's you define your own object and add it to the game. Objects are things the player can place down, as well as pickup, use, or craft with. A good example of an object in the base game are Benches or Beds.When you define an object the object oid will be the id you give prepended with your mod name, i.e sample_mod_my_object.",
            "params": [
                {
                    "name": "object_def",
                    "type": "obj_definition",
                    "documentation": "an obj definition table"
                },
                {
                    "name": "sprite_image",
                    "type": "string",
                    "documentation": "relative path to the sprite you want to use for this object, should be a 64x16 image with 4 frames (normal, normal highlighted, undiscovered, undiscovered highlight)"
                },
                {
                    "name": "draw_script",
                    "type": "string",
                    "documentation": "[Optional] if specified this allows you to override the default object draw with your own draw script - this must be a method in your mod, and won't be called if you set the obj_definition \"invisible\" property to true"
                }
            ]
        },
        {
            "name": "api_define_property",
            "description": "This allows you to define a new property onto any instance which you'll then be able to use with api_set_property() and api_get_property(). Most commonly you'll be using this in your menu object's define script. You can use \"api_dp()\" as a shorthand.Potentially you might end up overriding an existing property so might be worth checking first before setting something generic!If defining properties on a menu object, you will need to add them to the default _fields key for them to get saved + loaded if you need them to (see below)",
            "params": [
                {
                    "name": "inst_id",
                    "type": "integer",
                    "documentation": "id of instance to set a property on"
                },
                {
                    "name": "prop_name",
                    "type": "string",
                    "documentation": "key for the property to set"
                },
                {
                    "name": "prop_value",
                    "type": "Any",
                    "documentation": "value to set the property to"
                }
            ]
        },
        {
            "name": "api_define_quest",
            "description": "This method allows you to define your own quest that will be shown in the quest book with it's own requirements and rewards. Currently all modded quests show under their own seperate section at the bottom of the book.",
            "params": [
                {
                    "name": "quest_def",
                    "type": "quest_definition",
                    "documentation": "the quest definition table you want to use"
                },
                {
                    "name": "page1",
                    "type": "list(quest_line)",
                    "documentation": "the lines for the left-hand side quest page"
                },
                {
                    "name": "page2",
                    "type": "list(quest_definition)",
                    "documentation": "the lines for the right-hand side quest page"
                }
            ]
        },
        {
            "name": "api_define_recipe",
            "description": "This method allows you to define a new recipe for the workbench for a specific tab. There's only so much space in the workbench so maybe you'll have to create your own special workbench? ;)",
            "params": [
                {
                    "name": "tab",
                    "type": "string",
                    "documentation": "the tab in the workbench that this recipe will be shown in, options are crafting, tools, beekeeping, decoration, and painting"
                },
                {
                    "name": "item",
                    "type": "string",
                    "documentation": "the item oid that you want this recipe to be for"
                },
                {
                    "name": "recipe",
                    "type": "recipe",
                    "documentation": "a recipe definition you want to use"
                },
                {
                    "name": "amount",
                    "type": "integer",
                    "documentation": "[Optional] if specified, when crafting this recipe the player will get this amount instead of 1"
                }
            ]
        },
        {
            "name": "api_define_sprite",
            "description": "This method allows you to define a custom sprite which you can then use in draw calls later. You can add any image you want but try not to add huge images as it can take longer to add your sprite to all the texture pages.Whatever name you provide will be prepended with \"sp_\", i.e. sp_my_sprite_name",
            "params": [
                {
                    "name": "sprite_name",
                    "type": "string",
                    "documentation": "the name for this sprite, will be prepended with \"sp_\""
                },
                {
                    "name": "sprite_image",
                    "type": "string",
                    "documentation": "the path to the sprite you want to add, can be any size"
                },
                {
                    "name": "frames",
                    "type": "integer",
                    "documentation": "the number of frames for the sprite - your image will be divided by the number of frames given"
                }
            ]
        },
        {
            "name": "api_define_tank",
            "description": "This method allows you to define a liquid storage tank for a given menu. This tank can then be used with standard methods like api_slot_fill(), api_slot_drain(), and api_draw_tank()",
            "params": [
                {
                    "name": "menu_id",
                    "type": "integer",
                    "documentation": "the menu instance to add the tank too"
                },
                {
                    "name": "tank_amount",
                    "type": "integer",
                    "documentation": "the default amount of liquid in the tank"
                },
                {
                    "name": "tank_max",
                    "type": "integer",
                    "documentation": "the max amount of liquid this tank can have"
                },
                {
                    "name": "tank_type",
                    "type": "string",
                    "documentation": "the type of tank this is, options are water, resin, honey or mead"
                },
                {
                    "name": "tx",
                    "type": "integer",
                    "documentation": "the x position of this tank relative to the menu's top-left corner"
                },
                {
                    "name": "ty",
                    "type": "integer",
                    "documentation": "the y position of this tank relative to the menu's top-left corner"
                },
                {
                    "name": "tank_size",
                    "type": "string",
                    "documentation": "the size of the tank gui (unrelated to tank_max), options are small, medium, large or xlarge"
                },
                {
                    "name": "tank_script",
                    "type": "string",
                    "documentation": "[Optional] the name of the function you want to call when the tank is clicked on - must be defined in your mod"
                }
            ]
        },
        {
            "name": "api_define_trait",
            "description": "This method allows you to define a completely new trait for all bees in the game. This trait will be passed down through dominent and recessive genes like all traits, and you'll be able to access the value of the trait through the slot's stats.",
            "params": [
                {
                    "name": "trait_key",
                    "type": "string",
                    "documentation": "the name of this trait, will be prepended with your mod id, i.e. sample_mod_magic"
                },
                {
                    "name": "trait_map",
                    "type": "table",
                    "documentation": "a table containing keys with a species name, and a value containing a list of available values for this species (see below for example). When a \"new\" bee is formed through mutation, it will pick randomly from it's trait ranges to get a value for itself."
                },
                {
                    "name": "default_value",
                    "type": "list(string)",
                    "documentation": "a value (or values) to use for any species not in the trait_map, or for any existing bee items when they're bred later"
                }
            ]
        },
        {
            "name": "api_draw_button",
            "description": "Utility method to quickly draw a button you've defined with api_define_button(). You could draw the button manually but this does a lot of boilerplate for you.",
            "params": [
                {
                    "name": "button_id",
                    "type": "integer",
                    "documentation": "the button id to draw"
                },
                {
                    "name": "show_text",
                    "type": "boolean",
                    "documentation": "if the button has text you can choose to draw it here"
                }
            ]
        },
        {
            "name": "api_draw_circle",
            "description": "This lets you draw a circle (filled or outline) at a give position.",
            "params": [
                {
                    "name": "cx",
                    "type": "integer",
                    "documentation": "the x position to draw at (this will be at the centre of the circle)"
                },
                {
                    "name": "cy",
                    "type": "integer",
                    "documentation": "the y position to draw at (this will be at the centre of the circle)"
                },
                {
                    "name": "rad",
                    "type": "integer",
                    "documentation": "the radius of the circle"
                },
                {
                    "name": "outline",
                    "type": "boolean",
                    "documentation": "whether to draw an outline instead of a filled circle"
                },
                {
                    "name": "col",
                    "type": "string",
                    "documentation": "[Optional] the color key to use for this circle color, either one you defined with api_define_color() or a name from the colors_ref.json game file, defaults to white if not specified"
                },
                {
                    "name": "alpha",
                    "type": "integer",
                    "documentation": "[Optional] the alpha level to draw with (number between 0-1)"
                }
            ]
        },
        {
            "name": "api_draw_line",
            "description": "This lets you draw a basic line between two points.",
            "params": [
                {
                    "name": "x1",
                    "type": "integer",
                    "documentation": "the x position to start the line at"
                },
                {
                    "name": "y1",
                    "type": "integer",
                    "documentation": "the y position to start the line at"
                },
                {
                    "name": "x2",
                    "type": "integer",
                    "documentation": "the x position to end the line at"
                },
                {
                    "name": "y2",
                    "type": "integer",
                    "documentation": "the y position to end the line at"
                },
                {
                    "name": "col",
                    "type": "string",
                    "documentation": "[Optional] the color key to use for this circle color, either one you defined with api_define_color() or a name from the colors_ref.json game file, defaults to white if not specified"
                },
                {
                    "name": "alpha",
                    "type": "integer",
                    "documentation": "[Optional] the alpha level to draw with (number between 0-1)"
                }
            ]
        },
        {
            "name": "api_draw_rectangle",
            "description": "This lets you draw a basic rectangle shape, either outlined or filled.",
            "params": [
                {
                    "name": "x1",
                    "type": "integer",
                    "documentation": "the left x position of the rectangle"
                },
                {
                    "name": "y1",
                    "type": "integer",
                    "documentation": "the top y position of the rectangle"
                },
                {
                    "name": "x2",
                    "type": "integer",
                    "documentation": "the right x position of the rectangle"
                },
                {
                    "name": "y2",
                    "type": "integer",
                    "documentation": "the bottom y position of the rectangle"
                },
                {
                    "name": "outline",
                    "type": "boolean",
                    "documentation": "whether to draw an outline instead of a filled rectangle"
                },
                {
                    "name": "col",
                    "type": "string",
                    "documentation": "[Optional] the color key to use for this circle color, either one you defined with api_define_color() or a name from the colors_ref.json game file, defaults to white if not specified"
                },
                {
                    "name": "alpha",
                    "type": "integer",
                    "documentation": "[Optional] the alpha level to draw with (number between 0-1)"
                }
            ]
        },
        {
            "name": "api_draw_sprite",
            "description": "This let's you draw a sprite that you either created through api_define_sprite() or retrieved through api_get_sprite().You should get your sprite indexes outside of the draw script to help performance.",
            "params": [
                {
                    "name": "sprite_ref",
                    "type": "integer",
                    "documentation": "the sprite id to draw with"
                },
                {
                    "name": "frame",
                    "type": "integer",
                    "documentation": "the sprite frame to draw"
                },
                {
                    "name": "sx",
                    "type": "integer",
                    "documentation": "the x position to draw at"
                },
                {
                    "name": "sy",
                    "type": "integer",
                    "documentation": "the y position to draw at"
                }
            ]
        },
        {
            "name": "api_draw_sprite_part",
            "description": "This is the same as api_draw_sprite() except you can draw a part of the sprite instead of the whole sprite.",
            "params": [
                {
                    "name": "sprite_ref",
                    "type": "integer",
                    "documentation": "the sprite id to draw with"
                },
                {
                    "name": "frame",
                    "type": "integer",
                    "documentation": "the sprite frame to draw"
                },
                {
                    "name": "left",
                    "type": "integer",
                    "documentation": "the x position on the sprite image to draw the part from"
                },
                {
                    "name": "top",
                    "type": "integer",
                    "documentation": "the y position on the sprite image to draw the part from"
                },
                {
                    "name": "width",
                    "type": "integer",
                    "documentation": "the width of the part"
                },
                {
                    "name": "height",
                    "type": "integer",
                    "documentation": "the height of the part"
                },
                {
                    "name": "sx",
                    "type": "integer",
                    "documentation": "the x position to draw at"
                },
                {
                    "name": "sy",
                    "type": "integer",
                    "documentation": "the y position to draw at"
                }
            ]
        },
        {
            "name": "api_draw_sprite_ext",
            "description": "This is the same as api_draw_sprite() except you can apply scale transformations, rotations and color blending.",
            "params": [
                {
                    "name": "sprite_ref",
                    "type": "integer",
                    "documentation": "the sprite id to draw with"
                },
                {
                    "name": "frame",
                    "type": "integer",
                    "documentation": "the sprite frame to draw"
                },
                {
                    "name": "sx",
                    "type": "integer",
                    "documentation": "the x position to draw at"
                },
                {
                    "name": "sy",
                    "type": "integer",
                    "documentation": "the y position to draw at"
                },
                {
                    "name": "x_scale",
                    "type": "integer",
                    "documentation": "the x scale to apply"
                },
                {
                    "name": "y_scale",
                    "type": "integer",
                    "documentation": "the y scale to apply"
                },
                {
                    "name": "rot",
                    "type": "integer",
                    "documentation": "the rotation angle to draw at"
                },
                {
                    "name": "alp",
                    "type": "integer",
                    "documentation": "the alpha level to draw with"
                },
                {
                    "name": "col",
                    "type": "string",
                    "documentation": "[Optional] the color key to use for this circle color, either one you defined with api_define_color() or a name from the colors_ref.json game file, defaults to white if not specified"
                }
            ]
        },
        {
            "name": "api_draw_text",
            "description": "This allows you to draw any amount of text, either on 1 line or wrapped based off a width",
            "params": [
                {
                    "name": "tx",
                    "type": "integer",
                    "documentation": "the x position to draw at"
                },
                {
                    "name": "ty",
                    "type": "integer",
                    "documentation": "the y position to draw at"
                },
                {
                    "name": "text",
                    "type": "integer",
                    "documentation": "the text to draw"
                },
                {
                    "name": "card",
                    "type": "boolean",
                    "documentation": "whether to show a card background behind the text (like tooltips)"
                },
                {
                    "name": "col",
                    "type": "string",
                    "documentation": "[Optional] the color key to use for this circle color, either one you defined with api_define_color() or a name from the colors_ref.json game file, defaults to white if not specified"
                },
                {
                    "name": "tw",
                    "type": "integer",
                    "documentation": "[Optional] a width to apply to the text, causing extra text to wrap onto the next line"
                }
            ]
        },
        {
            "name": "api_draw_tank",
            "description": "Utility method to quickly draw a tank you've defined with api_define_tank(). You could draw the tank manually but this does a lot of boilerplate for you, including the liquid colour, liquid amount, liquid texture, highlights and more.",
            "params": [
                {
                    "name": "tank_id",
                    "type": "integer",
                    "documentation": "the tank gui id to draw"
                }
            ]
        },
        {
            "name": "api_get_boundary",
            "description": "This method allows you to get a bounding box for a given instance - bounding boxes are not always the same as the image themselves for base game objects, but with sprites you have created the box will be automatically created based on the sprite.",
            "params": [
                {
                    "name": "inst_id",
                    "type": "integer",
                    "documentation": "the instance you want to get the boundary for"
                }
            ]
        },
        {
            "name": "api_get_camera_position",
            "description": "This method lets you get the camera position. The entire world is made up of objects with a coordinate relative to 0,0 in the top left of the world, but the camera follows around the player to show the view that you see as you walk around.If you want to draw something within the view you'll need to take into account the camera position.",
            "params": []
        },
        {
            "name": "api_get_data",
            "description": "This method lets you retrieve your mods' data.json file. As file loading needs to be asynchronous, this will callback to the data() hook, so you will need to handle the processing of your data file to do whatever you want to do there.",
            "params": []
        },
        {
            "name": "api_get_definition",
            "description": "This method lets you get the definition for a given oid from the dictionary based on a given oid.",
            "params": [
                {
                    "name": "oid",
                    "type": "integer",
                    "documentation": "the oid to retrieve a dictionary definition for"
                }
            ]
        },
        {
            "name": "api_get_equipped",
            "description": "This allows you to get whatever item is currently equipped by the player - either held in the mouse or in the active hotbar slot. Like in the game, the held mouse item is prioritised over the hotbar.",
            "params": []
        },
        {
            "name": "api_get_filename",
            "description": "This allows you to get the current filename for the file the player is playing. Mods are not file specific so any data you need to store should be based off filename rather than generic.",
            "params": []
        },
        {
            "name": "api_get_floor",
            "description": "This method gets you the current flooring at a given position.",
            "params": [
                {
                    "name": "tx",
                    "type": "integer",
                    "documentation": "the x position to check"
                },
                {
                    "name": "ty",
                    "type": "integer",
                    "documentation": "the y position to check"
                }
            ]
        },
        {
            "name": "api_get_flowers",
            "description": "This method gets a list of all the flowers currently onscreen.",
            "params": [
                {
                    "name": "radius",
                    "type": "integer",
                    "documentation": "[Optional] if specified this method will get all objects within this radius from the player, rather than get all onscreen"
                }
            ]
        },
        {
            "name": "api_get_game_size",
            "description": "This method gets the current game size, taking into account the scaling of the game. You can use this to draw things with the same height or width as the game screen, i.e. for an overlay in the gui() hook.",
            "params": []
        },
        {
            "name": "api_get_ground",
            "description": "This method gets the ground oid at the given position. This is the actual land/water oid for the biome at that position.",
            "params": [
                {
                    "name": "tx",
                    "type": "integer",
                    "documentation": "the x position to check"
                },
                {
                    "name": "ty",
                    "type": "integer",
                    "documentation": "the y position to check"
                }
            ]
        },
        {
            "name": "api_get_highlighted",
            "description": "At any given time something is probably being highlighted by the player - this allows you to find out what!It's worth noting that items are the floating items on the ground - not items in your menus/inventory. For that you want to use slots.",
            "params": [
                {
                    "name": "inst_type",
                    "type": "string",
                    "documentation": "the type of instance you want to check is highlighted, options are item, obj, menu_obj, menu, slot, ui, wall, carpet, and ground"
                }
            ]
        },
        {
            "name": "api_get_inst",
            "description": "This method lets you access an instance's properties by giving its id. GMS is very ID based so a lot of things just rely on IDs in-game, so this method is exposed so you can access the properties we can just get from the ID in GMS internally.",
            "params": [
                {
                    "name": "inst_id",
                    "type": "integer",
                    "documentation": "an instance id to get the properties for"
                }
            ]
        },
        {
            "name": "api_get_inst_in_rectangle",
            "description": "This method lets you get a list of instances in a given rectangle boundary.",
            "params": [
                {
                    "name": "inst_type",
                    "type": "string",
                    "documentation": "the type of instance you want to check is highlighted, options are item, obj, tree, flower and menu_obj"
                },
                {
                    "name": "x1",
                    "type": "integer",
                    "documentation": "left x position of the rectangle box"
                },
                {
                    "name": "y1",
                    "type": "integer",
                    "documentation": "top y position of the rectangle box"
                },
                {
                    "name": "x2",
                    "type": "integer",
                    "documentation": "right x position of the rectangle box"
                },
                {
                    "name": "y1",
                    "type": "integer",
                    "documentation": "bottom y position of the rectangle box"
                }
            ]
        },
        {
            "name": "api_get_inst_in_circle",
            "description": "This method lets you get a list of instances in a given circle boundary.",
            "params": [
                {
                    "name": "inst_type",
                    "type": "string",
                    "documentation": "the type of instance you want to check is highlighted, options are item, obj, tree, flower and menu_obj"
                },
                {
                    "name": "x1",
                    "type": "integer",
                    "documentation": "x center position of the circle"
                },
                {
                    "name": "y1",
                    "type": "integer",
                    "documentation": "y center position of the circle"
                },
                {
                    "name": "rad",
                    "type": "integer",
                    "documentation": "radius of the circle"
                }
            ]
        },
        {
            "name": "api_get_key_down",
            "description": "This method checks if a given key is being held down by the player.",
            "params": [
                {
                    "name": "key_label",
                    "type": "string",
                    "documentation": "either a key character like \"A\" or one of the following special labels: LEFT, RIGHT, UP, DOWN, ENTER, ESC, SPACE, SHFT, CTRL, ALT, TAB"
                }
            ]
        },
        {
            "name": "api_get_key_pressed",
            "description": "This method checks if a given key has been pressed. This is only triggered once after the player pressed the key - it will not trigger again until the key is released.",
            "params": [
                {
                    "name": "key_label",
                    "type": "string",
                    "documentation": "either a key character like \"A\" or one of the following special labels: LEFT, RIGHT, UP, DOWN, ENTER, ESC, SPACE, SHFT, CTRL, ALT, TAB"
                }
            ]
        },
        {
            "name": "api_get_menu_objects",
            "description": "This method gets a list of all menu objects either onscreen or \"working\". All menu objects have a working property, usually set by activity (a queen for Beehives, or logs in a Sawmill) - while working these objects stay active.",
            "params": [
                {
                    "name": "radius",
                    "type": "integer",
                    "documentation": "[Optional] if specified this method will get all objects within this radius from the player, rather than get all onscreen"
                },
                {
                    "name": "oid",
                    "type": "string",
                    "documentation": "[Optional] if specified this method will only return objs with a matching oid"
                },
                {
                    "name": "coordinate",
                    "type": "coordinate",
                    "documentation": "[Optional] if using a radius, this allows you specify the center point to use. If not given, will default to the player"
                }
            ]
        },
        {
            "name": "api_get_menus_obj",
            "description": "This method gets the menu object instance from a given menu instance. As you probably realised these are two different things! Menu objects are the objects in the overworld you click on, and when you click on them they open their menu instance.",
            "params": [
                {
                    "name": "menu_id",
                    "type": "integer",
                    "documentation": "the menu instance to get the menu object inst for"
                }
            ]
        },
        {
            "name": "api_get_mouse_position",
            "description": "This method gets the current mouse position.",
            "params": []
        },
        {
            "name": "api_get_mouse_tile_position",
            "description": "This method gets the position of the tile currently underneath the mouse",
            "params": []
        },
        {
            "name": "api_get_objects",
            "description": "This method gets a list of all objects currently onscreen.",
            "params": [
                {
                    "name": "radius",
                    "type": "integer",
                    "documentation": "[Optional] if specified this method will get all objects within this radius from the player, rather than get all onscreen"
                },
                {
                    "name": "oid",
                    "type": "string",
                    "documentation": "[Optional] if specified this method will only return objs with a matching oid"
                },
                {
                    "name": "coordinate",
                    "type": "coordinate",
                    "documentation": "[Optional] if using a radius, this allows you specify the center point to use. If not given, will default to the player"
                }
            ]
        },
        {
            "name": "api_get_player_instance",
            "description": "This method gets the player instance. For pretty much all intents and purposes the player counts as a very fancy menu object that you can retrieve the slots for as you would any other menu object.There's a whole bunch of properties on the player instance needed to run the game, set properties on this instance at your own risk!Here's some default properties that might be useful to retrieve with api_get_property():",
            "params": [
                {
                    "name": "name",
                    "type": "string",
                    "documentation": "the player's name"
                },
                {
                    "name": "money",
                    "type": "integer",
                    "documentation": "the amount of rubees the player has"
                },
                {
                    "name": "honeycore",
                    "type": "integer",
                    "documentation": "the amount of honeycore the player has"
                },
                {
                    "name": "dir",
                    "type": "string",
                    "documentation": "the direction the player is facing, either left or right"
                },
                {
                    "name": "sitting",
                    "type": "boolean",
                    "documentation": "whether the player is sitting on a bench"
                },
                {
                    "name": "sleeping",
                    "type": "boolean",
                    "documentation": "whether the player is sleeping"
                },
                {
                    "name": "sailing",
                    "type": "boolean",
                    "documentation": "whether the player is in a boat"
                },
                {
                    "name": "hotbar",
                    "type": "integer",
                    "documentation": "the index of the slot the player has active in their hotbar, from 0-9"
                },
                {
                    "name": "current_tile",
                    "type": "string",
                    "documentation": "the current ground oid beneath the player (see {{F|api_get_ground()}} for oid names)"
                }
            ]
        },
        {
            "name": "api_get_player_position",
            "description": "This method gets the player position, relative to 0,0 in the top left of the world.",
            "params": []
        },
        {
            "name": "api_get_player_tile_position",
            "description": "This method gets the position of the tile the player is currently on, relative to 0,0 in the top left of the world.",
            "params": []
        },
        {
            "name": "api_get_property",
            "description": "This method will get a given property from an instance. You can also use the shorthand \"api_gp()\" for this method.",
            "params": [
                {
                    "name": "inst_id",
                    "type": "integer",
                    "documentation": "instance id to get a property for"
                },
                {
                    "name": "prop_name",
                    "type": "string",
                    "documentation": "name of the property to try and get"
                }
            ]
        },
        {
            "name": "api_get_slot",
            "description": "This method will get a slot from a given menu based on it's slot index. To make things easier, all slot indexes in the API start at 1, to match LUA lists starting at 1.",
            "params": [
                {
                    "name": "menu_id",
                    "type": "integer",
                    "documentation": "menu instance to get a slot from"
                },
                {
                    "name": "slot_index",
                    "type": "integer",
                    "documentation": "index of the slot to get, starting at 1"
                }
            ]
        },
        {
            "name": "api_get_slot_inst",
            "description": "This method will get a slot based on it's instance id, instead of needed to provide a menu_id and slot_index like the method above.This is useful for using it with api_get_highlighted to save you getting the menu details first.",
            "params": [
                {
                    "name": "slot_id",
                    "type": "integer",
                    "documentation": "slot instance to get properties for"
                }
            ]
        },
        {
            "name": "api_get_slots",
            "description": "This method is similar to the previous one, except it gets all of the slots for a given menu.",
            "params": [
                {
                    "name": "menu_id",
                    "type": "integer",
                    "documentation": "menu instance to get a slot from"
                }
            ]
        },
        {
            "name": "api_get_sprite",
            "description": "This method will return a sprite id for a given oid. This can be for an item/object you have defined, a sprite you have defined, or for a standard game oid.You need to prepend the oid with \"sp_\", for example sp_axe1.",
            "params": [
                {
                    "name": "oid",
                    "type": "string",
                    "documentation": "sprite to get the reference for"
                }
            ]
        },
        {
            "name": "api_get_time",
            "description": "This method will get the current game time, current day, as well as some other useful information.",
            "params": []
        },
        {
            "name": "api_get_trees",
            "description": "This method will get all the trees currently onscreen.",
            "params": [
                {
                    "name": "radius",
                    "type": "integer",
                    "documentation": "[Optional] if specified this method will get all objects within this radius from the player, rather than get all onscreen"
                }
            ]
        },
        {
            "name": "api_get_weather",
            "description": "This method will get the current weather, and the weather duration. Weather is generic and either on or off - the biome decides the type of weather visuals to show.",
            "params": []
        },
        {
            "name": "api_give_honeycore",
            "description": "Gives a certain amount of Honeycore to the player.",
            "params": [
                {
                    "name": "amount",
                    "type": "integer",
                    "documentation": "the amount to give"
                }
            ]
        },
        {
            "name": "api_give_item",
            "description": "Gives a certain amount of a specific item to the player.",
            "params": [
                {
                    "name": "item_oid",
                    "type": "string",
                    "documentation": "the item oid to give"
                },
                {
                    "name": "amount",
                    "type": "integer",
                    "documentation": "the amount to give"
                }
            ]
        },
        {
            "name": "api_give_money",
            "description": "Gives a certain amount of Rubees to the player.",
            "params": [
                {
                    "name": "amount",
                    "type": "integer",
                    "documentation": "the amount to give"
                }
            ]
        },
        {
            "name": "api_check_discovery",
            "description": "This method lets you check if the player has discovered a given item based on it's oid. This lets you know if they've ever picked up a specific item or gives an idea of rough progress.",
            "params": [
                {
                    "name": "oid",
                    "type": "string",
                    "documentation": "the item oid you want to check discovery for"
                }
            ]
        },
        {
            "name": "api_choose",
            "description": "This method picks randomly from a list of items you give it and returns the result.",
            "params": [
                {
                    "name": "items",
                    "type": "list",
                    "documentation": "list of items you want to pick from"
                }
            ]
        },
        {
            "name": "api_destroy_inst",
            "description": "This method will destroy a given instance, assuming it exists.",
            "params": [
                {
                    "name": "inst_id",
                    "type": "integer",
                    "documentation": "the id of the instance you want to destroy"
                }
            ]
        },
        {
            "name": "api_play_sound",
            "description": "This method will play a given sound from the base game sounds.",
            "params": [
                {
                    "name": "name",
                    "type": "string",
                    "documentation": "the sound name to play, current options are break, click, confetti, error, jingle, open, plop, pop, or rollover"
                }
            ]
        },
        {
            "name": "api_random",
            "description": "This returns a random number between 0 and the number you give it",
            "params": [
                {
                    "name": "max",
                    "type": "integer",
                    "documentation": "the max number to be returned"
                }
            ]
        },
        {
            "name": "api_random_range",
            "description": "This returns a random number between a given range of numbers.",
            "params": [
                {
                    "name": "start_num",
                    "type": "integer",
                    "documentation": "number for range to start at"
                },
                {
                    "name": "end_num",
                    "type": "integer",
                    "documentation": "number for range to end at"
                }
            ]
        },
        {
            "name": "api_toggle_menu",
            "description": "This lets you force a menu to be open or closed. Note: this needs the menu_id not the menu_obj_id so be sure to pass the correct id for it to work!",
            "params": [
                {
                    "name": "menu_id",
                    "type": "integer",
                    "documentation": "the menu instance to open or close"
                },
                {
                    "name": "toggle",
                    "type": "string",
                    "documentation": "how you want to toggle the menu, either open or close"
                }
            ]
        },
        {
            "name": "api_mod_exists",
            "description": "This checks is a given mod exists and is registered and initialised correctly.",
            "params": [
                {
                    "name": "mod_name",
                    "type": "string",
                    "documentation": "the unique mod name for the mod"
                }
            ]
        },
        {
            "name": "api_mod_call",
            "description": "This lets you call a function from another mod assuming that mod exists",
            "params": [
                {
                    "name": "mod_name",
                    "type": "string",
                    "documentation": "the unique mod name for the mod"
                },
                {
                    "name": "method_name",
                    "type": "string",
                    "documentation": "the method to call in the other mod's file"
                },
                {
                    "name": "args",
                    "type": "list",
                    "documentation": "[Optional] a list of args to pass in"
                }
            ]
        },
        {
            "name": "api_set_blueprint",
            "description": "This method allows you to override the default worldgen pattern with your own blueprint, meaning you can create custom worlds - even more so when used with worldgen().For reference, game worlds are 350x350 tiles, with 290x290 being visible on the map and rest being reserved for secret areas.",
            "params": [
                {
                    "name": "blueprints",
                    "type": "list(blueprint)",
                    "documentation": "the blueprints you want to use, each blueprint being a \"blob\" of land you define"
                },
                {
                    "name": "blank",
                    "type": "list(boolean)",
                    "documentation": "if true this will mean that no objects are created during the worldgen, giving you an entirely blank world with only grass/water"
                }
            ]
        },
        {
            "name": "api_set_data",
            "description": "This method allows you to set the contents of your mods data.json file that you can retrieve through api_get_data(). This lets your store data across sessions - you can use the save() hook to check when the player or game has saved.As file load/save is asynchronous you will need to use the data() hook to handle the response to check if it worked.",
            "params": [
                {
                    "name": "json_data",
                    "type": "table",
                    "documentation": "a table of data that will be turned into JSON"
                }
            ]
        },
        {
            "name": "api_set_devmode",
            "description": "Your other best friend along with api_create_log(), this method toggles the devmod. We'd recommend just having this on the whole time you work on your mod as it gives you access to the In-Game Console which can be opened with / and let's you run commands like /gimme log 5 or /weather on.It will also show the FPS meter so you can check performance.",
            "params": [
                {
                    "name": "dev_mode",
                    "type": "boolean",
                    "documentation": "whether to turn dev mode on or off."
                }
            ]
        },
        {
            "name": "api_set_floor",
            "description": "This method sets the floor tile at a given position.",
            "params": [
                {
                    "name": "floor_oid",
                    "type": "string",
                    "documentation": "the floor oid to set, see below for details"
                },
                {
                    "name": "tx",
                    "type": "integer",
                    "documentation": "the x position to set the tile, will be rounded to the grid"
                },
                {
                    "name": "ty",
                    "type": "integer",
                    "documentation": "the y position to set the tile, will be rounded to the grid"
                }
            ]
        },
        {
            "name": "api_set_ground",
            "description": "This method lets you set the actual ground at a given position. The ground oid is what determines the biome the player or bees are in.",
            "params": [
                {
                    "name": "ground_oid",
                    "type": "string",
                    "documentation": "the ground oid you want to set"
                },
                {
                    "name": "tx",
                    "type": "integer",
                    "documentation": "the x position to set the tile, will be rounded to the grid"
                },
                {
                    "name": "ty",
                    "type": "integer",
                    "documentation": "the y position to set the tile, will be rounded to the grid"
                }
            ]
        },
        {
            "name": "api_set_immortal",
            "description": "All instances in the game get deactivated offscreen - with the exception of menu objects if they are still \"working\". If you have a menu object that needs to stay active regardless of whether it is onscreen or working, you can set this property to true.The more menu objects active the lower the performance over time - do not have 100s of menu objects immortal if you want a good time.",
            "params": [
                {
                    "name": "menu_obj_id",
                    "type": "integer",
                    "documentation": "the id of the menu object instance you want to immortalise"
                },
                {
                    "name": "bool",
                    "type": "boolean",
                    "documentation": "whether to set the property to true or false"
                }
            ]
        },
        {
            "name": "api_set_menu_position",
            "description": "This method lets you manually set the position of a menu if you need to. Usually the menu position is set when the object is clicked on and the menu will either be opened next to the object, or in the centre of the screen depending on the {{D|menu_definition}}'s \"center\" property.Combined with {{F|api_toggle_menu()}} this would allow you to open a menu object from anywhere and show the menu anywhere.",
            "params": [
                {
                    "name": "menu_id",
                    "type": "integer",
                    "documentation": "the menu you want to move (note: not the menu object id)"
                },
                {
                    "name": "mx",
                    "type": "integer",
                    "documentation": "the x position you want to move the menu to"
                },
                {
                    "name": "my",
                    "type": "integer",
                    "documentation": "the y position you want to move the menu to"
                }
            ]
        },
        {
            "name": "api_set_notification",
            "description": "This method lets you set your own notification, either with a standard notification type of your own custom notification type.The standard notifications just have their own click actions, i.e. clicking a flower notification opens the flower book. Your own notification type can have it's own click action when defined in api_define_notification()",
            "params": [
                {
                    "name": "notification_type",
                    "type": "string",
                    "documentation": "a notification type, either your own or one of the standard types: workbench, quest, bees, microscope, flowers, weather, altar, buff, mag, notice"
                },
                {
                    "name": "item_oid",
                    "type": "string",
                    "documentation": "the item oid to show in the notification icon"
                },
                {
                    "name": "title",
                    "type": "string",
                    "documentation": "the title to show in the notification"
                },
                {
                    "name": "msg",
                    "type": "string",
                    "documentation": "the message to show in the notification"
                }
            ]
        },
        {
            "name": "api_set_player_position",
            "description": "This method lets you set the players current position. After moving the player it will automatically update the camera, like the game does when using beds or gates.",
            "params": [
                {
                    "name": "px",
                    "type": "integer",
                    "documentation": "the x position you want to set"
                },
                {
                    "name": "py",
                    "type": "integer",
                    "documentation": "the y position you want to set"
                }
            ]
        },
        {
            "name": "api_set_position",
            "description": "This method lets you set the position of any given instance.",
            "params": [
                {
                    "name": "inst_id",
                    "type": "integer",
                    "documentation": "the instance you want to move"
                },
                {
                    "name": "px",
                    "type": "integer",
                    "documentation": "the x position you want to set"
                },
                {
                    "name": "py",
                    "type": "integer",
                    "documentation": "the y position you want to set"
                }
            ]
        },
        {
            "name": "api_set_property",
            "description": "This method allows you to set a property on an instance so you can use it later. You can also use the \"api_sp()\" shorthand.When setting custom properties on menu objects you should add the prop_name to the menu_obj._fields list key if you want to keep it persistent when the player saves.",
            "params": [
                {
                    "name": "inst_id",
                    "type": "integer",
                    "documentation": "the instance you want to set a property for"
                },
                {
                    "name": "prop_name",
                    "type": "string",
                    "documentation": "the name of the property you want to set"
                },
                {
                    "name": "prop_value",
                    "type": "Any",
                    "documentation": "the value for the property"
                }
            ]
        },
        {
            "name": "api_set_spawn",
            "description": "This method sets the spawn position for the player. The spawn is used whenever the player is stuck in deep water, and by default is on the pier by Skipper and then set when a bed is used.",
            "params": [
                {
                    "name": "px",
                    "type": "integer",
                    "documentation": "the x position you want to set"
                },
                {
                    "name": "py",
                    "type": "integer",
                    "documentation": "the y position you want to set"
                }
            ]
        },
        {
            "name": "api_set_time",
            "description": "This method lets you update the in-game time, either to a set time or a raw time in ms",
            "params": [
                {
                    "name": "time",
                    "type": "string",
                    "documentation": "a preset time point in the day to use, options are dawn_start, dawn_mid, day_start, dusk_start, dusk_mid, night_start, or night_end"
                },
                {
                    "name": "raw_ms",
                    "type": "integer",
                    "documentation": "[Optional] instead of a preset you can set a raw time in ms - see time for more info"
                }
            ]
        },
        {
            "name": "api_set_tooltip",
            "description": "This method lets change the dictionary tooltip for a given oid's definition. You can use this to make dynamic tooltips for different objects.",
            "params": [
                {
                    "name": "oid",
                    "type": "string",
                    "documentation": "the oid of the definition you want to update, i.e. axe1"
                },
                {
                    "name": "tooltip",
                    "type": "string",
                    "documentation": "the tooltip string you want to use instead"
                }
            ]
        },
        {
            "name": "api_set_weather",
            "description": "This lets you update the weather in game by specifying the start and end times of the weather. The weather is reset at the end of the day.The type of weather is based on the biome the player is currently in, weather as a property is either on or off.",
            "params": [
                {
                    "name": "start_time",
                    "type": "integer",
                    "documentation": "the time in ms for the weather to start - see time for more info"
                },
                {
                    "name": "end_time",
                    "type": "integer",
                    "documentation": "the time in ms for the weather to end - see time for more info"
                }
            ]
        },
        {
            "name": "api_slot_clear",
            "description": "This method will clear a given slot, making it empty.",
            "params": [
                {
                    "name": "slot_id",
                    "type": "integer",
                    "documentation": "the slot id of the slot instance you want to clear"
                }
            ]
        },
        {
            "name": "api_slot_decr",
            "description": "This method will decrease a slot count by the amount given, or 1 if no amount specified. If the slot count is reduced to 0 the slot will be cleared automatically.",
            "params": [
                {
                    "name": "slot_id",
                    "type": "integer",
                    "documentation": "the slot id of the slot instance you want to clear"
                },
                {
                    "name": "amount",
                    "type": "integer",
                    "documentation": "[Optional] amount to decrease by, defaults to 1"
                }
            ]
        },
        {
            "name": "api_slot_drain",
            "description": "This method will drain a menu's tank into the given slot, assuming the slot has something it can drain into (canister1 or canister2).This method will only work with a slot that is part of a menu you defined a tank on with api_define_tank.",
            "params": [
                {
                    "name": "menu_id",
                    "type": "integer",
                    "documentation": "the menu id for the slot you want to drain into, this menu must have a tank defined"
                },
                {
                    "name": "slot_index",
                    "type": "integer",
                    "documentation": "the slot index in the menu you want to drain to, starting at 1"
                }
            ]
        },
        {
            "name": "api_slot_fill",
            "description": "This method will fill a menu's tank into the given slot, assuming the slot has something it can fill from (canister1 or canister2).This method will only work with a slot that is part of a menu you defined a tank on with api_define_tank.",
            "params": [
                {
                    "name": "menu_id",
                    "type": "integer",
                    "documentation": "the menu id for the slot you want to fill into, this menu must have a tank defined"
                },
                {
                    "name": "slot_index",
                    "type": "integer",
                    "documentation": "the slot index in the menu you want to fill from, starting at 1"
                }
            ]
        },
        {
            "name": "api_slot_incr",
            "description": "This method will increase a slot count by the amount given, or 1 if no amount specified. It will cap out automatically at 99.",
            "params": [
                {
                    "name": "slot_id",
                    "type": "integer",
                    "documentation": "the slot id of the slot instance you want to clear"
                },
                {
                    "name": "amount",
                    "type": "integer",
                    "documentation": "[Optional] amount to increase by, defaults to 1"
                }
            ]
        },
        {
            "name": "api_slot_match",
            "description": "This method allows you to find a slot or slots that match a given item criteria you define. This is useful to get slots that already have a given item, or say return the first slot that's empty.",
            "params": [
                {
                    "name": "menu_id",
                    "type": "integer",
                    "documentation": "the menu instance you want to find matches on"
                },
                {
                    "name": "match",
                    "type": "list(string)",
                    "documentation": "a list of item values you want to match on, can be an item oid, \"ANY\" (for any item), or \"\" for blank"
                },
                {
                    "name": "first_only",
                    "type": "boolean",
                    "documentation": "[Optional] if true, this method will return the first slot only rather than a list of matches"
                }
            ]
        },
        {
            "name": "api_slot_match_range",
            "description": "This is the same as api_slot_match() except you can specify the range of slot indexes to match from rather than all the slots.",
            "params": [
                {
                    "name": "menu_id",
                    "type": "integer",
                    "documentation": "the menu instance you want to find matches on"
                },
                {
                    "name": "match",
                    "type": "list(string)",
                    "documentation": "a list of item values you want to match on, can be an item oid, \"ANY\" (for any item), or \"\" for blank"
                },
                {
                    "name": "range",
                    "type": "list(integer)",
                    "documentation": "a list of slot indexes to check. Indices start at 1 like LUA lists do"
                },
                {
                    "name": "first_only",
                    "type": "boolean",
                    "documentation": "[Optional] if true, this method will return the first slot only rather than a list of matches"
                }
            ]
        },
        {
            "name": "api_slot_set",
            "description": "This method lets you set the contents of a slot manually, overriding anything in that slot.",
            "params": [
                {
                    "name": "slot_id",
                    "type": "integer",
                    "documentation": "the slot id of the slot instance you want to set"
                },
                {
                    "name": "item_oid",
                    "type": "string",
                    "documentation": "the item oid you want to set in the slot"
                },
                {
                    "name": "amount",
                    "type": "integer",
                    "documentation": "the amount of the item you want to set. If setting a singular item this will be ignored"
                },
                {
                    "name": "stats",
                    "type": "stats",
                    "documentation": "[Optional] a stats obj to use, can be one you got from api_create_bee_stats() or a custom one"
                }
            ]
        },
        {
            "name": "api_slot_set_inactive",
            "description": "This method lets you set a slot to be inactive. Inactive slots can't be highlighted/hovered, are not drawn, and can't be clicked on.A good use case would be one menu with two sets of slots you want to hide or show at any given time without having to re-create slots.",
            "params": [
                {
                    "name": "slot_id",
                    "type": "integer",
                    "documentation": "the slot id of the slot instance you want to set"
                },
                {
                    "name": "inactive",
                    "type": "boolean",
                    "documentation": "whether to set the slot as inactive or not"
                }
            ]
        },
        {
            "name": "api_slot_set_modded",
            "description": "This method lets you set a slot to be 'modded'. Modded slots CAN be highlighted/hovered but they can't be clicked on.This allows you to handle your own click logic for the slot.",
            "params": [
                {
                    "name": "slot_id",
                    "type": "integer",
                    "documentation": "the slot id of the slot instance you want to set"
                },
                {
                    "name": "modded",
                    "type": "boolean",
                    "documentation": "whether to set the slot as modded or not"
                }
            ]
        },
        {
            "name": "api_take_honeycore",
            "description": "Takes a certain amount of Honeycore from the player.",
            "params": [
                {
                    "name": "amount",
                    "type": "integer",
                    "documentation": "the amount to take"
                }
            ]
        },
        {
            "name": "api_take_money",
            "description": "Takes a certain amount of Rubees from the player.",
            "params": [
                {
                    "name": "amount",
                    "type": "integer",
                    "documentation": "the amount to take"
                }
            ]
        },
        {
            "name": "api_use_item",
            "description": "This method will use up a certain amount of an item from the players inventory and open menus, like how the paintbrush uses up dye or the workbench uses up items while crafting.You should use api_use_total() to check what the player has first!",
            "params": [
                {
                    "name": "item_oid",
                    "type": "string",
                    "documentation": "the item to use up"
                },
                {
                    "name": "amounr",
                    "type": "integer",
                    "documentation": "the amount to use up"
                }
            ]
        },
        {
            "name": "api_use_total",
            "description": "This method returns the total amount of an item currently in the players inventory and open menus.",
            "params": [
                {
                    "name": "item_oid",
                    "type": "string",
                    "documentation": "the item to use up"
                }
            ]
        }
    ]
}